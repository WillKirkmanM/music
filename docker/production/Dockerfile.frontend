FROM node:21-alpine

RUN apk --no-cache add ca-certificates wget

# Install glibc to run Bun
RUN if [[ $(uname -m) == "aarch64" ]] ; \
    then \
    # aarch64
    wget https://raw.githubusercontent.com/squishyu/alpine-pkg-glibc-aarch64-bin/master/glibc-2.26-r1.apk ; \
    apk add --no-cache --allow-untrusted --force-overwrite glibc-2.26-r1.apk ; \
    rm glibc-2.26-r1.apk ; \
    else \
    # x86_64
    wget https://github.com/sgerrand/alpine-pkg-glibc/releases/download/2.28-r0/glibc-2.28-r0.apk ; \
    wget -q -O /etc/apk/keys/sgerrand.rsa.pub https://alpine-pkgs.sgerrand.com/sgerrand.rsa.pub ; \
    apk add --no-cache --force-overwrite glibc-2.28-r0.apk ; \
    rm glibc-2.28-r0.apk ; \
    fi

RUN npm install -g bun

# Install dependencies
RUN apk update
# RUN apk add --no-cache libc6-compat
RUN apk add --update --no-cache openssl python3

# Set working directory
WORKDIR /app

# Install turbo
# RUN yarn global add turbo
# RUN bun add turbo --global
RUN npm install -g turbo

# Copy all files
COPY . .

# Prune music
# RUN turbo prune music --docker
# RUN turbo prune music --docker

# Install the dependencies
# RUN yarn install
RUN bun install

# Build the project
# RUN yarn turbo run generate --scope music
# RUN yarn turbo run build --filter=music
RUN bun turbo run generate --filter music
RUN bun turbo run build --filter music

# RUN bun turbo run build --filter music

# # Don't run production as root
RUN addgroup --system --gid 1001 nodejs
RUN adduser --system --uid 1001 nextjs
USER nextjs

USER root 
RUN chown -R nextjs:nodejs /app/apps/web/
USER nextjs

WORKDIR /app/apps/web/

CMD bun run start